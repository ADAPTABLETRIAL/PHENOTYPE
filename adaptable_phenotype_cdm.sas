/*--------------------------------------------------------------------------------------\
|    PROGRAM NAME     adaptable_phenotype_cdm.sas                                       |
|    DATE             12/10/2015                                                        |
|    VERSION          1.0                                                               |
|                                                                                       |
|---------------------------------------------------------------------------------------|
|    PURPOSE  The purpose of this program is to identify patients who are potentially   |
|             eligible for the PCORnet ADAPTABLE trial by (a) defining as many of the   |
|             stated trial inclusion and exclusion criteria in terms of the PCORnet     |
|             Common Data Model (CDM) v3.0 as possible, and (b) applying these criteria |
|             to EHR data that have been transformed into the CDM.                      |
|                                                                                       |
|             This program is to be considered a starting point for sites as they begin |
|             to identify patients who may or may not be eligible for the ADAPTABLE     |
|             trial. Sites are encouraged to supplement this query with other           |
|             information in their EHR that may not appear in the CDM. Sites are also   |
|             free to edit this query as they see fit.                                  |
|                                                                                       |
|---------------------------------------------------------------------------------------|
|    PROGRAM INPUT                                                                      |
|        CDM tables:                                                                    |
|            cdm.death (if available)                                                   |
|            cdm.demographic                                                            |
|            cdm.diagnosis                                                              |
|            cdm.dispensing (if available)                                              |
|            cdm.encounter                                                              |
|            cdm.lab_result_cm (if available)                                           |
|            cdm.procedures                                                             |
|            cdm.prescribing (if available)                                             |
|                                                                                       |
|        Dependencies:                                                                  |
|            [none]                                                                     |
|                                                                                       |
|        SAS programs:                                                                  |
|            [none -- all code contained within]                                        |
|                                                                                       |
|    PROGRAM OUTPUT                                                                     |
|        SAS dataset: outlib.adaptable_prelim                                           |
|                                                                                       |
|        This dataset will contain information for all patients deemed to be part of    |
|        the reference population from which potential trial participants will be       |
|        identified within the PCORnet datamart. This dataset will contain the CDM      |
|        patient identifier, PATID, and the following derived indicator variables:      |
|                                                                                       |
|           refPop          = "Reference population membership"                         |
|           died            = "Known to have died [CDM basis]"                          |
|           eligAge18       = "Eligibility/Age: Age >= 18 years [CDM basis]"            |
|           eligPriorMI     = "Eligibility/ASCVD: Prior MI [CDM basis]"                 |
|           eligPriorPCI    = "Eligibility/ASCVD: Prior PCI [CDM basis]"                |
|           eligPriorCABG   = "Eligibility/ASCVD: Prior CABG [CDM basis]"               |
|           safetyGIBleed   = "Safety issue: Recent GI bleed [CDM basis]"               |
|           safetyDisorder  = "Safety issue: Bleeding disorder [CDM basis]"             |
|           enrichAge65     = "Enrichment factor: Age > 65 years [CDM basis]"           |
|           enrichDiab      = "Enrichment factor: Diabetes [CDM basis]"                 |
|           enrichCVD       = "Enrichment factor: Cerebrovascular dz [CDM basis]"       |
|           enrichPAD       = "Enrichment factor: Peripheral arterial dz [CDM basis]"   |
|           enrichLVSD      = "Enrichment factor: LVEF < 50% [CDM basis]"               |
|           enrichCreat     = "Enrichment factor: Creatinine > 1.5 mg/dL [CDM basis]"   |
|           enrichSmoker    = "Enrichment factor: Current smoker [CDM basis]"           |
|           medWarf         = "Medication/OAC: Warfarin [CDM basis]"                    |
|           medDabi         = "Medication/OAC: Dabigatran [CDM basis]"                  |
|           medRiva         = "Medication/OAC: Rivaroxaban [CDM basis]"                 |
|           medApix         = "Medication/OAC: Apixaban [CDM basis]"                    |
|           medEdox         = "Medication/OAC: Edoxaban [CDM basis]"                    |
|           medTica         = "Medication: Ticagrelor [CDM basis]"                      |
|           eligASCVD       = "Eligibility/ASCVD: Any [CDM basis]"                      |
|           safetyIssue     = "Safety issue: Any [CDM basis]"                           |
|           enrichFactor    = "Enrichment factor: Any [CDM basis]"                      |
|           medContra       = "Medication: Any of listed [CDM basis]"                   |
|           eligibleCDM     = "Preliminary eligibility [CDM basis]"                     |
|                                                                                       |
|        Each of these variables will be coded as 0/1 (for N/Y). The final variable,    |
|        eligibleCDM, is the result of applying all the other criteria as specified     |
|        by the trial protocol. The dataset is not limited to the patients for whom     |
|        eligibleCDM = 1 since not all of the trial inclusion and exclusion criteria    |
|        can be ascertained using CDM data.                                             |
|                                                                                       |
\--------------------------------------------------------------------------------------*/

/*--------------------------------------------------------------------------------------\
|    USER INPUT SECTION                                                                 |
\--------------------------------------------------------------------------------------*/
/*--------------------------------------------------------------------------------------\
|    Specify SAS dataset locations for use in program libnames. Use forward slashes /   |
|    for all paths whether on *nix or windows.                                          |
|                                                                                       |
|    CDM is the location of the CDM tables                                              |
|    OUTLIB is the location in which you would like the output dataset to be placed     |
\--------------------------------------------------------------------------------------*/
%let CDM = /projects/pcornet_cdm/adaptable_phenotype/sasdsl;
%let OUTLIB = /projects/pcornet_cdm/adaptable_phenotype/sasdsl;

/*--------------------------------------------------------------------------------------\
|    Specify which optional CDM tables appear in your datamart                          |
|      HAS_DEATH         = Y|N                                                          |
|      HAS_DISPENSING    = Y|N                                                          |
|      HAS_PRESCRIBING   = Y|N                                                          |
|      HAS_LAB_RESULT_CM = Y|N                                                          |
|      HAS_VITAL         = Y|N                                                          |
\--------------------------------------------------------------------------------------*/
%let HAS_DEATH         = Y;
%let HAS_DISPENSING    = Y;
%let HAS_PRESCRIBING   = N;
%let HAS_LAB_RESULT_CM = N;
%let HAS_VITAL         = N;

/*--------------------------------------------------------------------------------------\
|    Specify whether or not you have a predefined reference population of patients to   |
|    use as the base population for this query                                          |
|      PREDEFINED_REFPOP = Y|N                                                          |
|                                                                                       |
|      If Y, make a SAS dataset with (minimally) the PATID for each patient and specify |
|      the SAS location of this dataset                                                 |
|      REFPOP_DS = WHICHLIB.WHICHTABLE                                                                            |
\--------------------------------------------------------------------------------------*/
%let PREDEFINED_REFPOP = N;
%let REFPOP_DS = ;

/*--------------------------------------------------------------------------------------\
|    Specify date ranges for various criteria specifications as SAS date constants.     |
|    SAS date constants have the form 'DDMONYYYY'd, like '01JAN2012'd. The today()      |
|    function can be used to refer to the date the query is run.                        |
|                                                                                       |
|    REF_START_DT / REF_END_DT                                                          |
|       Used for identifying the reference population                                   |
|    HISTORY_START_DT / HISTORY_END_DT                                                  |
|       Used for ascertainment of historical inclusion/exclusion criteria               |
|    RECENT_START_DT / RECENT_END_DT                                                    |
|       Used for ascertainment of recent inclusion/exclusion criteria                   |
|    RX_START_DT / RX_END_DT                                                            |
|       Used for ascertainment of medication use                                        |
|    LAB_START_DT / LAB_END_DT                                                          |
|       Used for ascertainment of lab results                                           |
|    AGE_ASOF_DT                                                                        |
|       Date on which to calculate patient age                                          |
\--------------------------------------------------------------------------------------*/
%let REF_START_DT = '01JAN2013'd;
%let REF_END_DT   = '31DEC2015'd;

%let HISTORY_START_DT = '01JAN2010'd;
%let HISTORY_END_DT   = '31DEC2015'd;

%let RECENT_START_DT = '01JAN2015'd;
%let RECENT_END_DT   = '31DEC2015'd;

%let RX_START_DT = '01JUL2015'd;
%let RX_END_DT   = '31DEC2015'd;

%let LAB_START_DT = '01JUL2015'd;
%let LAB_END_DT   = '31DEC2015'd;

%let AGE_ASOF_DT = '31DEC2015'd;

/*--------------------------------------------------------------------------------------\
|    CDM CRITERIA CODE LISTS                                                            |
|    Diagnosis, procedure, and medication codes to define criteria                      |
|                                                                                       |
|    Macro variable suffix / Meaning                                                    |
|     I9_DX  / ICD-9-CM diagnosis codes                                                 |
|     I10_DX / ICD-10-CM diagnosis codes                                                |
|     I9_DX  / ICD-9-CM procedure codes                                                 |
|     I10_PX / ICD-10-PCS procedure codes                                               |
|     C4_HC  / CPT-4 or HCPCS (Level II) procedure codes                                |
|     NDC    / National drug codes                                                      |
|     CUI    / RxNORM concept identifier (CUI)                                          |
\--------------------------------------------------------------------------------------*/
%let MI_I9_DX = %nrstr(
'41000', '41001', '41002', '41010', '41011', '41012', '41020', '41021', '41022', '41030', '41031', '41032', '41040', '41041', '41042', '41050', '41051', '41052', '41060', '41061', '41062', '41070', '41071', '41072', '41080', '41081', '41082', '41090', '41091', '41092', '412'
);

%let MI_I10_DX = %nrstr(
'I2101', 'I2102', 'I2109', 'I2111', 'I2119', 'I2121', 'I2129', 'I213', 'I214', 'I220', 'I221', 'I222', 'I228', 'I229', 'I252'
);

%let PCI_I9_PX = %nrstr(
'0066', '1755', '3601', '3602', '3605', '3606', '3607', '3609'
);

%let PCI_I10_PX = %nrstr(
'0270046', '027004Z', '02700D6', '02700DZ', '02700T6', '02700TZ', '02700Z6', '02700ZZ', '0270346', '027034Z', '02703D6', '02703DZ', '02703T6', '02703TZ', '02703Z6', '02703ZZ', '0270446', '027044Z', '02704D6', '02704DZ', '02704T6', '02704TZ', '02704Z6', '02704ZZ', '0271046', '027104Z', '02710D6', '02710DZ', '02710T6', '02710TZ', '02710Z6', '02710ZZ', '0271346', '027134Z', '02713D6', '02713DZ', '02713T6', '02713TZ', '02713Z6', '02713ZZ', '0271446', '027144Z', '02714D6', '02714DZ', '02714T6', '02714TZ', '02714Z6', '02714ZZ', '0272046', '027204Z', '02720D6', '02720DZ', '02720T6', '02720TZ', '02720Z6', '02720ZZ', '0272346', '027234Z', '02723D6', '02723DZ', '02723T6', '02723TZ', '02723Z6', '02723ZZ', '0272446', '027244Z', '02724D6', '02724DZ', '02724T6', '02724TZ', '02724Z6', '02724ZZ', '0273046', '027304Z', '02730D6', '02730DZ', '02730T6', '02730TZ', '02730Z6', '02730ZZ', '0273346', '027334Z', '02733D6', '02733DZ', '02733T6', '02733TZ', '02733Z6', '02733ZZ', '0273446', '027344Z', '02734D6', '02734DZ', '02734T6', '02734TZ', '02734Z6', '02734ZZ', '02C03ZZ', '02C04ZZ', '02C13ZZ', '02C14ZZ', '02C23ZZ', '02C24ZZ', '02C33ZZ', '02C34ZZ', 'X2C0361', 'X2C1361'
);

%let PCI_C4_HC = %nrstr(
'92920', '92921', '92924', '92925', '92928', '92929', '92933', '92934', '92937', '92938', '92941', '92943', '92944', '92980', '92981', '92982', '92984', '92995', '92996', 'C9600', 'C9601', 'C9602', 'C9603', 'C9604', 'C9605', 'C9606', 'C9607', 'C9608', 'G0290', 'G0291'
);

%let PCI_I9_DX = %nrstr(
'V4582'
);

%let PCI_I10_DX = %nrstr(
'Z955', 'Z9861'
);

%let CABG_I9_PX = %nrstr(
'3610', '3611', '3612', '3613', '3614', '3615', '3616', '3617', '3619', 'V4581'
);

%let CABG_I10_PX = %nrstr(
'0210093', '0210098', '0210099', '021009C', '021009F', '021009W', '02100A3', '02100A8', '02100A9', '02100AC', '02100AF', '02100AW', '02100J3', '02100J8', '02100J9', '02100JC', '02100JF', '02100JW', '02100K3', '02100K8', '02100K9', '02100KC', '02100KF', '02100KW', '02100Z3', '02100Z8', '02100Z9', '02100ZC', '02100ZF', '0210344', '02103D4', '0210444', '0210493', '0210498', '0210499', '021049C', '021049F', '021049W', '02104A3', '02104A8', '02104A9', '02104AC', '02104AF', '02104AW', '02104D4', '02104J3', '02104J8', '02104J9', '02104JC', '02104JF', '02104JW', '02104K3', '02104K8', '02104K9', '02104KC', '02104KF', '02104KW', '02104Z3', '02104Z8', '02104Z9', '02104ZC', '02104ZF', '0211093', '0211098', '0211099', '021109C', '021109F', '021109W', '02110A3', '02110A8', '02110A9', '02110AC', '02110AF', '02110AW', '02110J3', '02110J8', '02110J9', '02110JC', '02110JF', '02110JW', '02110K3', '02110K8', '02110K9', '02110KC', '02110KF', '02110KW', '02110Z3', '02110Z8', '02110Z9', '02110ZC', '02110ZF', '0211344', '02113D4', '0211444', '0211493', '0211498', '0211499', '021149C', '021149F', '021149W', '02114A3', '02114A8', '02114A9', '02114AC', '02114AF', '02114AW', '02114D4', '02114J3', '02114J8', '02114J9', '02114JC', '02114JF', '02114JW', '02114K3', '02114K8', '02114K9', '02114KC', '02114KF', '02114KW', '02114Z3', '02114Z8', '02114Z9', '02114ZC', '02114ZF', '0212093', '0212098', '0212099', '021209C', '021209F', '021209W', '02120A3', '02120A8', '02120A9', '02120AC', '02120AF', '02120AW', '02120J3', '02120J8', '02120J9', '02120JC', '02120JF', '02120JW', '02120K3', '02120K8', '02120K9', '02120KC', '02120KF', '02120KW', '02120Z3', '02120Z8', '02120Z9', '02120ZC', '02120ZF', '0212344', '02123D4', '0212444', '0212493', '0212498', '0212499', '021249C', '021249F', '021249W', '02124A3', '02124A8', '02124A9', '02124AC', '02124AF', '02124AW', '02124D4', '02124J3', '02124J8', '02124J9', '02124JC', '02124JF', '02124JW', '02124K3', '02124K8', '02124K9', '02124KC', '02124KF', '02124KW', '02124Z3', '02124Z8', '02124Z9', '02124ZC', '02124ZF', '0213093', '0213098', '0213099', '021309C', '021309F', '021309W', '02130A3', '02130A8', '02130A9', '02130AC', '02130AF', '02130AW', '02130J3', '02130J8', '02130J9', '02130JC', '02130JF', '02130JW', '02130K3', '02130K8', '02130K9', '02130KC', '02130KF', '02130KW', '02130Z3', '02130Z8', '02130Z9', '02130ZC', '02130ZF', '0213344', '02133D4', '0213444', '0213493', '0213498', '0213499', '021349C', '021349F', '021349W', '02134A3', '02134A8', '02134A9', '02134AC', '02134AF', '02134AW', '02134D4', '02134J3', '02134J8', '02134J9', '02134JC', '02134JF', '02134JW', '02134K3', '02134K8', '02134K9', '02134KC', '02134KF', '02134KW', '02134Z3', '02134Z8', '02134Z9', '02134ZC', '02134ZF'
);

%let CABG_C4_HC = %nrstr(
'33510', '33511', '33512', '33513', '33514', '33516', '33517', '33518', '33519', '33521', '33522', '33523', '33533', '33534', '33535', '33536'
);

%let CABG_I9_DX = %nrstr(
'V4581'
);

%let CABG_I10_DX = %nrstr(
'Z951'
);

%let GIBLD_I9_DX = %nrstr(
'53100', '53101', '53120', '53121', '53140', '53141', '53160', '53161', '53200', '53201', '53220', '53221', '53240', '53241', '53260', '53261', '53300', '53301', '53320', '53321', '53340', '53341', '53360', '53361', '53400', '53401', '53420', '53421', '53440', '53441', '53460', '53461', '5781', '5307', '4560', '45620', '53082', '5693', '5780', '5789'
);

%let GIBLD_I10_DX = %nrstr(
'I8501', 'I8511', 'K226', 'K228', 'K250', 'K252', 'K254', 'K256', 'K260', 'K262', 'K264', 'K266', 'K270', 'K272', 'K274', 'K276', 'K280', 'K282', 'K284', 'K286', 'K625', 'K920', 'K921', 'K922'
);

%let BLDDIS_I9_DX = %nrstr(
'2860', '2861', '2862', '2863', '2864', '28652', '28653', '28659', '2866', '2867', '2869'
);

%let BLDDIS_I10_DX = %nrstr(
'D65', 'D66', 'D67', 'D680', 'D681', 'D682', 'D68311', 'D68312', 'D68318', 'D6832', 'D684', 'D688', 'D689'
);

%let WARF_NDC = %nrstr(
'00056016801', '00056016870', '00056016875', '00056016901', '00056016910', '00056016970', '00056016975', '00056016990', '00056017001', '00056017011', '00056017070', '00056017075', '00056017090', '00056017201', '00056017210', '00056017270', '00056017275', '00056017290', '00056017301', '00056017370', '00056017375', '00056017401', '00056017470', '00056017475', '00056017601', '00056017610', '00056017670', '00056017675', '00056017690', '00056018801', '00056018810', '00056018870', '00056018875', '00056018901', '00056018970', '00056018975', '00056018990', '00093171201', '00093171210', '00093171301', '00093171310', '00093171401', '00093171410', '00093171501', '00093171601', '00093171610', '00093171801', '00093171901', '00093172001', '00093172101', '00093172110', '00555083102', '00555083105', '00555083202', '00555083205', '00555083302', '00555083305', '00555083402', '00555083502', '00555086902', '00555086905', '00555087402', '00555087405', '00555092502', '00555092602', '00590032435', '00590032496', '00832121100', '00832121101', '00832121110', '00832121200', '00832121201', '00832121210', '00832121300', '00832121301', '00832121310', '00832121400', '00832121401', '00832121410', '00832121500', '00832121501', '00832121510', '00832121600', '00832121601', '00832121610', '00832121700', '00832121701', '00832121710', '00832121800', '00832121801', '00832121850', '00832121900', '00832121901', '00832121950', '16590034030', '16590034040', '16590034130', '21695067230', '21695067330', '21695067360', '21695067430', '21695067530', '21695067730', '21695080130', '21695093930', '21695094030', '24236026020', '24236035320', '24236080920', '31722032701', '31722032710', '31722032801', '31722032810', '31722032901', '31722032910', '31722033001', '31722033010', '31722033101', '31722033110', '31722033201', '31722033210', '31722033301', '31722033310', '31722033401', '31722033410', '31722033501', '31722033510', '33261035500', '33261035530', '33261035630', '33261035690', '33261035710', '33261035730', '33261035760', '33261035790', '35356039730', '35356039760', '35356039790', '35356057130', '35356057160', '35356057190', '35356058230', '35356058260', '35356058290', '35356090630', '35356090660', '35356090690', '42549049630', '42549049730', '43063021830', '43063047130', '43353004930', '43353004960', '43353005015', '43353005020', '43353005025', '43353005028', '43353005030', '43353005035', '43353005038', '43353005040', '43353005045', '43353005050', '43353005053', '43353005055', '43353005057', '43353005060', '43353005061', '43353005065', '43353005068', '43353005070', '43353005078', '43353008930', '43353008960', '43353014230', '43353014240', '43353014245', '43353014253', '43353014260', '43353049130', '43353049230', '43353049260', '43353049330', '43353049360', '43353049430', '43353057809', '43353057830', '43353057909', '43353057930', '43353058430', '43353058460', '43353058730', '49349004102', '49349014002', '49349034602', '49349054202', '49349054302', '49349055520', '49349060502', '49349061802', '49349062502', '49349065802', '49349071602', '49349071802', '49349079620', '49349081402', '49349082402', '49349085202', '49349086102', '49349090102', '49999041130', '49999092310', '49999092330', '49999092360', '49999092390', '50090002800', '50436635701', '50436635801', '50436636001', '50436636301', '50436993301', '50436994602', '51138005430', '51138005530', '51138005630', '51138005730', '51138005830', '51138005930', '51138006030', '51138006130', '51138006230', '51655027882', '51655028226', '51655028326', '51672402700', '51672402701', '51672402703', '51672402707', '51672402800', '51672402801', '51672402803', '51672402807', '51672402900', '51672402901', '51672402903', '51672402907', '51672403000', '51672403001', '51672403003', '51672403007', '51672403100', '51672403101', '51672403103', '51672403107', '51672403200', '51672403201', '51672403203', '51672403207', '51672403300', '51672403301', '51672403303', '51672403307', '51672403400', '51672403401', '51672403403', '51672403500', '51672403501', '51672403503', '52125005302', '52125007502', '52125007902', '52125008002', '52125009102', '52125009702', '52125009902', '52125018802', '52125018902', '52125038502', '52125038602', '52125038702', '52125043202', '52125044602', '52125044802', '52125044902', '52125045002', '52125045102', '52125046702', '52125050102', '52125057502', '52125058102', '52125061402', '52125062902', '52125090602', '52125090902', '52125091002', '53217000107', '53217000114', '53217000130', '53217000160', '53217000190', '53217001807', '53217001814', '53217001830', '53217001860', '53217001890', '53808033401', '53808033501', '53808097001', '53808098501', '53808098901', '53808099401', '53808099701', '54569015800', '54569015900', '54569444300', '54868125900', '54868125901', '54868125905', '54868125906', '54868125907', '54868212800', '54868212802', '54868212803', '54868225201', '54868339900', '54868339901', '54868339902', '54868428600', '54868428601', '54868428602', '54868428603', '54868428604', '54868428605', '54868434900', '54868434901', '54868434902', '54868434903', '54868434905', '54868440000', '54868440001', '54868440002', '54868440003', '54868440004', '54868440200', '54868440201', '54868440202', '54868440203', '54868442200', '54868442201', '54868442202', '54868442203', '54868442204', '54868442205', '54868487100', '54868487101', '54868487102', '54868487103', '54868487300', '54868487301', '54868487303', '54868487304', '54868495000', '54868495002', '54868495003', '54868525500', '54868525501', '54868525800', '55154087609', '55154087709', '55154087809', '55154087909', '55154088009', '55154088309', '55154088409', '55154561800', '55154561900', '55154562000', '55154562100', '55154770100', '55154770200', '55154770300', '55154770400', '55154770600', '55154770700', '55154771600', '55154771700', '55289034030', '55289077314', '55289077330', '55289077360', '55289077390', '55700000530', '55700000560', '55700000590', '57237011901', '57237011990', '57237011999', '57237012001', '57237012090', '57237012099', '57237012101', '57237012190', '57237012199', '57237012201', '57237012290', '57237012299', '57237012301', '57237012390', '57237012399', '57237012401', '57237012490', '57237012499', '57237012501', '57237012590', '57237012599', '57237012601', '57237012690', '57237012699', '57237012701', '57237012790', '57237012799', '58118003308', '58118004108', '58118006008', '58118006308', '58118006408', '58118402703', '58118402706', '58118402708', '58118402709', '58118402800', '58118402803', '58118402808', '58118402903', '58118402906', '58118402908', '58118402909', '58118403003', '58118403006', '58118403008', '58118403009', '58118403103', '58118403106', '58118403108', '58118403109', '58118403200', '58118403203', '58118403208', '58118403303', '58118403306', '58118403308', '58118403309', '58118403403', '58118403406', '58118403408', '58118403409', '58118403503', '58118403506', '58118403508', '58118403509', '58517036030', '60429078401', '60429078410', '60429078415', '60429078430', '60429078445', '60429078477', '60429078501', '60429078510', '60429078515', '60429078530', '60429078535', '60429078540', '60429078545', '60429078560', '60429078577', '60429078590', '60429078601', '60429078610', '60429078615', '60429078630', '60429078645', '60429078677', '60429078701', '60429078710', '60429078715', '60429078730', '60429078745', '60429078777', '60429078801', '60429078810', '60429078815', '60429078830', '60429078845', '60429078877', '60429078901', '60429078910', '60429078915', '60429078920', '60429078925', '60429078930', '60429078935', '60429078940', '60429078945', '60429078950', '60429078960', '60429078975', '60429078977', '60429078990', '60429079001', '60429079010', '60429079015', '60429079030', '60429079045', '60429079077', '60429079101', '60429079115', '60429079130', '60429079145', '60429079177', '60429079201', '60429079215', '60429079230', '60429079245', '60429079277', '60760004030', '60760004130', '60760004330', '60760012430', '61786034202', '61919034130', '62584098401', '62584099401', '63629254801', '63629254802', '63629254803', '63629254804', '63629254805', '63629254806', '63629317701', '63629317702', '63629317703', '63629317704', '63629401701', '63629401702', '63629401703', '63629401704', '63629401705', '63629401706', '63629401707', '63629401708', '63629412201', '63629412202', '63629412203', '63629412204', '63629412205', '63629412206', '63629412207', '63629412208', '63629441701', '63629441702', '63629441703', '63629454301', '63629454302', '63629454303', '63629474801', '63629474802', '63629474803', '63629525701', '64205003230', '64725005601', '64725083301', '65162076110', '65162076111', '65162076150', '65162076210', '65162076211', '65162076250', '65162076310', '65162076311', '65162076350', '65162076410', '65162076411', '65162076450', '65162076510', '65162076511', '65162076550', '65162076610', '65162076611', '65162076650', '65162076710', '65162076711', '65162076750', '65162076810', '65162076811', '65162076850', '65162076910', '65162076911', '65162076950', '65841005201', '65841005210', '65841005301', '65841005310', '65841005401', '65841005410', '65841005501', '65841005510', '65841005601', '65841005610', '65841005616', '65841005701', '65841005710', '65841005801', '65841005901', '65841006401', '65841006410', '67544005215', '67544005220', '67544005225', '67544005228', '67544005230', '67544005235', '67544005238', '67544005240', '67544005245', '67544005250', '67544005253', '67544005255', '67544005257', '67544005260', '67544005261', '67544005265', '67544005268', '67544005270', '67544005278', '67544007030', '67544019430', '67544019460', '67544019530', '67544019540', '67544019545', '67544019553', '67544019560', '67544031815', '67544031830', '67544031835', '67544031840', '67544031845', '67544031850', '67544031853', '67544031855', '67544031860', '67544031861', '67544031870', '67544040115', '67544040130', '67544040135', '67544040140', '67544040145', '67544040150', '67544040153', '67544040155', '67544040160', '67544040161', '67544040170', '68084002701', '68382005201', '68382005210', '68382005301', '68382005310', '68382005401', '68382005410', '68382005501', '68382005510', '68382005601', '68382005610', '68382005616', '68382005701', '68382005710', '68382005801', '68382005901', '68382006401', '68382006410', '76282032701', '76282032710', '76282032801', '76282032810', '76282032901', '76282032910', '76282033001', '76282033010', '76282033101', '76282033110', '76282033201', '76282033210', '76282033301', '76282033310', '76282033401', '76282033501'
);

%let WARF_CUI = %nrstr(
'11289', '114194', '202421', '368417', '374319', '405155', '406078', '855287', '855288', '855289', '855290', '855291', '855292', '855295', '855296', '855297', '855298', '855299', '855300', '855301', '855302', '855303', '855304', '855305', '855306', '855307', '855309', '855311', '855312', '855313', '855314', '855315', '855316', '855317', '855318', '855319', '855320', '855321', '855322', '855323', '855324', '855325', '855326', '855327', '855328', '855331', '855332', '855333', '855334', '855335', '855336', '855337', '855338', '855339', '855340', '855341', '855342', '855343', '855344', '855345', '855346', '855347', '855348', '855349', '855350', '1161790', '1161791', '1167808', '1167809', '1171655', '1171656'
);

%let DABI_NDC = %nrstr(
'00597010860', '00597013512', '00597013554', '00597013560', '00597014912', '00597014954', '00597014960', '21695089960'
);

%let DABI_CUI = %nrstr(
'1037041', '1037042', '1037043', '1037044', '1037045', '1037046', '1037047', '1037048', '1037049', '1037178', '1037179', '1037180', '1037181', '1156646', '1156647', '1184616', '1184617'
);

%let RIVA_NDC = %nrstr(
'50458057810', '50458057814', '50458057830', '50458057890', '50458057910', '50458057930', '50458057990', '50458057999', '50458058010', '50458058030', '55154142200', '55154142308', '55154142400'
);

%let RIVA_CUI = %nrstr(
'1114195', '1114196', '1114197', '1114198', '1114199', '1114200', '1114201', '1114202', '1157968', '1157969', '1186304', '1186305', '1232081', '1232082', '1232083', '1232084', '1232085', '1232086', '1232087', '1232088', '1549682', '1549683'
);

%let APIX_NDC = %nrstr(
'00003089321', '00003089331', '00003089341', '00003089421', '00003089431', '00003089441', '00003089491', '55154061200'
);

%let APIX_CUI = %nrstr(
'1364430', '1364431', '1364432', '1364433', '1364434', '1364435', '1364436', '1364437', '1364438', '1364439', '1364440', '1364441', '1364444', '1364445', '1364446', '1364447'
);

%let EDOX_NDC = %nrstr(
'65597020107', '65597020110', '65597020130', '65597020150', '65597020170', '65597020190', '65597020205', '65597020207', '65597020210', '65597020230', '65597020250', '65597020270', '65597020290', '65597020305', '65597020307', '65597020310', '65597020330', '65597020350', '65597020370', '65597020390'
);

%let EDOX_CUI = %nrstr(
'1599538', '1599539', '1599540', '1599541', '1599542', '1599543', '1599544', '1599545', '1599546', '1599547', '1599548', '1599549', '1599550', '1599551', '1599552', '1599553', '1599554', '1599555', '1599556', '1599557', '1599564'
);

%let TICA_NDC = %nrstr(
'00186077660', '00186077694', '00186077708', '00186077718', '00186077728', '00186077739', '00186077760', '63629529201', '55154961800'
);

%let TICA_CUI = %nrstr(
'1116632', '1116633', '1116634', '1116635', '1116636', '1116637', '1116638', '1116639', '1157089', '1157090', '1176340', '1176341', '1666331', '1666332', '1666333'
);

%let DIAB_I9_DX = %nrstr(
'25000', '25001', '25002', '25003', '25010', '25011', '25012', '25013', '25020', '25021', '25022', '25023', '25030', '25031', '25032', '25033', '25040', '25041', '25042', '25043', '25050', '25051', '25052', '25053', '25060', '25061', '25062', '25063', '25070', '25071', '25072', '25073', '25080', '25081', '25082', '25083', '25090', '25091', '25092', '25093'
);

%let DIAB_I10_DX = %nrstr(
'E1010', 'E1011', 'E1021', 'E1022', 'E1029', 'E10311', 'E10319', 'E10321', 'E10329', 'E10331', 'E10339', 'E10341', 'E10349', 'E10351', 'E10359', 'E1036', 'E1039', 'E1040', 'E1041', 'E1042', 'E1043', 'E1044', 'E1049', 'E1051', 'E1052', 'E1059', 'E10610', 'E10618', 'E10620', 'E10621', 'E10622', 'E10628', 'E10630', 'E10638', 'E10641', 'E10649', 'E1065', 'E1069', 'E108', 'E109', 'E1100', 'E1101', 'E1121', 'E1122', 'E1129', 'E11311', 'E11319', 'E11321', 'E11329', 'E11331', 'E11339', 'E11341', 'E11349', 'E11351', 'E11359', 'E1136', 'E1139', 'E1140', 'E1141', 'E1142', 'E1143', 'E1144', 'E1149', 'E1151', 'E1152', 'E1159', 'E11610', 'E11618', 'E11620', 'E11621', 'E11622', 'E11628', 'E11630', 'E11638', 'E11641', 'E11649', 'E1165', 'E1169', 'E118', 'E119'
);

%let CVD_I9_DX = %nrstr(
'430', '431', '4320', '4321', '4329', '43300', '43301', '43310', '43311', '43320', '43321', '43330', '43331', '43380', '43381', '43390', '43391', '43400', '43401', '43410', '43411', '43490', '43491', '4350', '4351', '4352', '4353', '4358', '4359', '436', '4370', '4371', '4373', '4374', '4375', '4376', '4377', '4378', '4379', '4380', '43810', '43811', '43812', '43813', '43814', '43819', '43820', '43821', '43822', '43830', '43831', '43832', '43840', '43841', '43842', '43850', '43851', '43852', '43853', '4386', '4387', '43881', '43882', '43883', '43884', '43885', '43889', '4389'
);

%let CVD_I10_DX = %nrstr(
'G450', 'G451', 'G452', 'G454', 'G458', 'G459', 'G460', 'G461', 'G462', 'G463', 'G464', 'G465', 'G466', 'G467', 'G468', 'I6000', 'I6001', 'I6002', 'I6010', 'I6011', 'I6012', 'I6020', 'I6021', 'I6022', 'I6030', 'I6031', 'I6032', 'I604', 'I6050', 'I6051', 'I6052', 'I606', 'I607', 'I608', 'I609', 'I610', 'I611', 'I612', 'I613', 'I614', 'I615', 'I616', 'I618', 'I619', 'I6200', 'I6201', 'I6202', 'I6203', 'I621', 'I629', 'I6300', 'I63011', 'I63012', 'I63019', 'I6302', 'I63031', 'I63032', 'I63039', 'I6309', 'I6310', 'I63111', 'I63112', 'I63119', 'I6312', 'I63131', 'I63132', 'I63139', 'I6319', 'I6320', 'I63211', 'I63212', 'I63219', 'I6322', 'I63231', 'I63232', 'I63239', 'I6329', 'I6330', 'I63311', 'I63312', 'I63319', 'I63321', 'I63322', 'I63329', 'I63331', 'I63332', 'I63339', 'I63341', 'I63342', 'I63349', 'I6339', 'I6340', 'I63411', 'I63412', 'I63419', 'I63421', 'I63422', 'I63429', 'I63431', 'I63432', 'I63439', 'I63441', 'I63442', 'I63449', 'I6349', 'I6350', 'I63511', 'I63512', 'I63519', 'I63521', 'I63522', 'I63529', 'I63531', 'I63532', 'I63539', 'I63541', 'I63542', 'I63549', 'I6359', 'I636', 'I638', 'I639', 'I6501', 'I6502', 'I6503', 'I6509', 'I651', 'I6521', 'I6522', 'I6523', 'I6529', 'I658', 'I659', 'I6601', 'I6602', 'I6603', 'I6609', 'I6611', 'I6612', 'I6613', 'I6619', 'I6621', 'I6622', 'I6623', 'I6629', 'I663', 'I668', 'I669', 'I671', 'I672', 'I675', 'I676', 'I677', 'I6781', 'I6782', 'I67841', 'I67848', 'I6789', 'I679', 'I680', 'I682', 'I688', 'I6900', 'I6901', 'I69020', 'I69021', 'I69022', 'I69023', 'I69028', 'I69031', 'I69032', 'I69033', 'I69034', 'I69039', 'I69041', 'I69042', 'I69043', 'I69044', 'I69049', 'I69051', 'I69052', 'I69053', 'I69054', 'I69059', 'I69061', 'I69062', 'I69063', 'I69064', 'I69065', 'I69069', 'I69090', 'I69091', 'I69092', 'I69093', 'I69098', 'I6910', 'I6911', 'I69120', 'I69121', 'I69122', 'I69123', 'I69128', 'I69131', 'I69132', 'I69133', 'I69134', 'I69139', 'I69141', 'I69142', 'I69143', 'I69144', 'I69149', 'I69151', 'I69152', 'I69153', 'I69154', 'I69159', 'I69161', 'I69162', 'I69163', 'I69164', 'I69165', 'I69169', 'I69190', 'I69191', 'I69192', 'I69193', 'I69198', 'I6920', 'I6921', 'I69220', 'I69221', 'I69222', 'I69223', 'I69228', 'I69231', 'I69232', 'I69233', 'I69234', 'I69239', 'I69241', 'I69242', 'I69243', 'I69244', 'I69249', 'I69251', 'I69252', 'I69253', 'I69254', 'I69259', 'I69261', 'I69262', 'I69263', 'I69264', 'I69265', 'I69269', 'I69290', 'I69291', 'I69292', 'I69293', 'I69298', 'I6930', 'I6931', 'I69320', 'I69321', 'I69322', 'I69323', 'I69328', 'I69331', 'I69332', 'I69333', 'I69334', 'I69339', 'I69341', 'I69342', 'I69343', 'I69344', 'I69349', 'I69351', 'I69352', 'I69353', 'I69354', 'I69359', 'I69361', 'I69362', 'I69363', 'I69364', 'I69365', 'I69369', 'I69390', 'I69391', 'I69392', 'I69393', 'I69398', 'I6980', 'I6981', 'I69820', 'I69821', 'I69822', 'I69823', 'I69828', 'I69831', 'I69832', 'I69833', 'I69834', 'I69839', 'I69841', 'I69842', 'I69843', 'I69844', 'I69849', 'I69851', 'I69852', 'I69853', 'I69854', 'I69859', 'I69861', 'I69862', 'I69863', 'I69864', 'I69865', 'I69869', 'I69890', 'I69891', 'I69892', 'I69893', 'I69898', 'I6990', 'I6991', 'I69920', 'I69921', 'I69922', 'I69923', 'I69928', 'I69931', 'I69932', 'I69933', 'I69934', 'I69939', 'I69941', 'I69942', 'I69943', 'I69944', 'I69949', 'I69951', 'I69952', 'I69953', 'I69954', 'I69959', 'I69961', 'I69962', 'I69963', 'I69964', 'I69965', 'I69969', 'I69990', 'I69991', 'I69992', 'I69993', 'I69998'
);

%let PAD_I9_DX = %nrstr(
'44020', '44021', '44022', '44023', '44024', '44029', '4439'
);

%let PAD_I10_DX = %nrstr(
'I70201', 'I70202', 'I70203', 'I70208', 'I70209', 'I70211', 'I70212', 'I70213', 'I70218', 'I70219', 'I70221', 'I70222', 'I70223', 'I70228', 'I70229', 'I70231', 'I70232', 'I70233', 'I70234', 'I70235', 'I70238', 'I70239', 'I70241', 'I70242', 'I70243', 'I70244', 'I70245', 'I70248', 'I70249', 'I7025', 'I70261', 'I70262', 'I70263', 'I70268', 'I70269', 'I70291', 'I70292', 'I70293', 'I70298', 'I70299', 'I739'
);

%let LVSD_I9_DX = %nrstr(
'42820', '42821', '42822', '42823', '42840', '42841', '42842', '42843'
);

%let LVSD_I10_DX = %nrstr(
'I5020', 'I5021', 'I5022', 'I5023', 'I5040', 'I5041', 'I5042', 'I5043'
);

/*--------------------------------------------------------------------------------------\
|    CDM SELECTION MACROS                                                               |
|                                                                                       |
|    SAS SQL code to identify patients by age, by diagnosis, by procedure, by           |
|    medication NDC code, by medication RxCUI, by lab result                            |
\--------------------------------------------------------------------------------------*/
%macro checkAge(outds, agedt, agecheck);

    proc sql;
        create table &outds as
        select distinct cdm_dem.patid
        from cdm.demographic cdm_dem
        where floor((intck('month', cdm_dem.birth_date, &agedt) - (day(&agedt) < day(cdm_dem.birth_date))) / 12) &agecheck
        order by cdm_dem.patid;
    quit;

%mend;

%macro checkDx(outds, fromdt, todt, codetype, codelist);

    proc sql;
        create table &outds as
        select distinct cdm_dx.patid
        from cdm.diagnosis cdm_dx
        where
            cdm_dx.admit_date between &fromdt and &todt and
            cdm_dx.dx_type = "&codetype" and
            compress(cdm_dx.dx, '.') in (&codelist)
        order by cdm_dx.patid;
    quit;

%mend;

%macro checkPx(outds, fromdt, todt, codetype, codelist);

    %if &codetype = C4HC %then
        %let codetype = %str("C4", "HC");
    %else
        %let codetype = %str("&codetype");

    proc sql;
        create table &outds as
        select distinct cdm_px.patid
        from cdm.procedures cdm_px
        where
            cdm_px.px_date between &fromdt and &todt and
            cdm_px.px_type in (&codetype) and
            compress(cdm_px.px, '.') in (&codelist)
        order by cdm_px.patid;
    quit;

%mend;

%macro checkNDC(outds, fromdt, todt, codelist);

    %if %upcase(&has_dispensing) = Y %then %do;
        proc sql;
            create table &outds as
            select distinct cdm_rx.patid
            from cdm.dispensing cdm_rx
            where
                cdm_rx.dispense_date between &fromdt and &todt and
                cdm_rx.ndc in (&codelist)
            order by cdm_rx.patid;
        quit;
    %end;
    %else %do;
        data &outds;
            set empty;
        run;
    %end;

%mend;

%macro checkCUI(outds, fromdt, todt, codelist);

    %if %upcase(&has_prescribing) = Y %then %do;
        proc sql;
            create table &outds as
            select distinct cdm_rx.patid
            from cdm.prescribing cdm_rx
            where
                cdm_rx.rx_order_date between &fromdt and &todt and
                cdm_rx.rxnorm_cui in (&codelist)
            order by cdm_rx.patid;
        quit;
    %end;
    %else %do;
        data &outds;
            set empty;
        run;
    %end;

%mend;

%macro checkLab(outds, fromdt, todt, labname, labunit, valuecheck);

    %if %upcase(&has_lab_result_cm) = Y %then %do;
        proc sql;
            create table &outds as
            select distinct cdm_lab.patid
            from cdm.lab_result_cm cdm_lab
            where
                cdm_lab.result_date between &fromdt and &todt and
                cdm_lab.lab_name = "&labname" and
                cdm_lab.result_unit = "&labunit" and
                &valuecheck
            order by cdm_lab.patid;
        quit;
    %end;
    %else %do;
        data &outds;
            set empty;
        run;
    %end;

%mend;

/*--------------------------------------------------------------------------------------\
|    CDM QUERYING STARTS HERE                                                           |
\--------------------------------------------------------------------------------------*/
libname cdm "&cdm";
libname outlib "&outlib";

%macro main;

    /* Create an empty dataset, if needed, to account for missing CDM tables */
    data empty;
        set cdm.demographic(keep=patid obs=0);
    run;

    /* If there is a predefined reference population, use it. Otherwise it  |
    |  will be defined here as subjects with 2+ recent encounters of        |
    |  type IP, EI, or AV                                                  */
    %if %upcase(&predefined_refpop) = Y %then %do;
        data refPop;
            set &refpop_ds;
        run;
    %end;
    %else %do;
        proc sql;
            create table refPop as
            select cdm_enc.patid
            from cdm.encounter cdm_enc
            where
                cdm_enc.enc_type in ('IP', 'EI', 'AV') and
                cdm_enc.admit_date between &ref_start_dt and &ref_end_dt
            group by cdm_enc.patid
            having count(*) >= 2
            order by cdm_enc.patid;
        quit;
    %end;

    /* Find subjects who died */
    %if %upcase(&has_death) = Y %then %do;
        proc sql;
            create table died as
            select distinct cdm_dth.patid
            from cdm.death cdm_dth
            order by cdm_dth.patid;
        quit;
    %end;
    %else %do;
        data died;
            set empty;
        run;
    %end;

    /* Eligibility criteria: Age >= 18 */
    %checkAge(
        eligAge18,
        &age_asof_dt,
        %str(>= 18)
    )

    /* Enrichment factor: Age > 65 */
    %checkAge(
        enrichAge65,
        &age_asof_dt,
        %str(> 65)
    )

    /* ASCVD criteria: Prior MI */
    %checkDx(
        eligPriorMI_I9,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&mi_i9_dx)
    )

    %checkDx(
        eligPriorMI_I10,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&mi_i10_dx)
    )

    /* ASCVD criteria: Prior PCI */
    %checkDx(
        eligPriorPCI_I9Dx,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&pci_i9_dx)
    )

    %checkDx(
        eligPriorPCI_I10Dx,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&pci_i10_dx)
    )

    %checkPx(
        eligPriorPCI_I9Px,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&pci_i9_px)
    )

    %checkPx(
        eligPriorPCI_I10Px,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&pci_i10_px)
    )

    %checkPx(
        eligPriorPCI_C4HC,
        &history_start_dt,
        &history_end_dt,
        C4HC,
        %str(&pci_c4_hc)
    )

    /* ASCVD criteria: Prior CABG */
    %checkDx(
        eligPriorCABG_I9Dx,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&cabg_i9_dx)
    )

    %checkDx(
        eligPriorCABG_I10Dx,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&cabg_i10_dx)
    )

    %checkPx(
        eligPriorCABG_I9Px,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&cabg_i9_px)
    )

    %checkPx(
        eligPriorCABG_I10Px,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&cabg_i10_px)
    )

    %checkPx(
        eligPriorCABG_C4HC,
        &history_start_dt,
        &history_end_dt,
        C4HC,
        %str(&cabg_c4_hc)
    )

    /* Safety criteria: GI bleeding */
    %checkDx(
        safetyGIBleed_I9,
        &recent_start_dt,
        &recent_end_dt,
        09,
        %str(&gibld_i9_dx)
    )

    %checkDx(
        safetyGIBleed_I10,
        &recent_start_dt,
        &recent_end_dt,
        10,
        %str(&gibld_i10_dx)
    )

    /* Safety criteria: Bleeding disorder */
    %checkDx(
        safetyDisorder_I9,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&blddis_i9_dx)
    )

    %checkDx(
        safetyDisorder_I10,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&blddis_i10_dx)
    )

    /* Enrichment factor: Diabetes */
    %checkDx(
        enrichDiab_I9,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&diab_i9_dx)
    )

    %checkDx(
        enrichDiab_I10,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&diab_i10_dx)
    )

    /* Enrichment factor: Cerebrovascular disease */
    %checkDx(
        enrichCVD_I9,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&cvd_i9_dx)
    )

    %checkDx(
        enrichCVD_I10,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&cvd_i10_dx)
    )

    /* Enrichment factor: Peripheral arterial disease */
    %checkDx(
        enrichPAD_I9,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&pad_i9_dx)
    )

    %checkDx(
        enrichPAD_I10,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&pad_i10_dx)
    )

    /* Enrichment factor: Reduced ejection fraction */
    %checkDx(
        enrichLVSD_I9,
        &history_start_dt,
        &history_end_dt,
        09,
        %str(&lvsd_i9_dx)
    )

    %checkDx(
        enrichLVSD_I10,
        &history_start_dt,
        &history_end_dt,
        10,
        %str(&lvsd_i10_dx)
    )

    /* Medication: Warfarin */
    %checkNDC(
        medWarfarin_NDC,
        &rx_start_dt,
        &rx_end_dt,
        %str(&warf_ndc)
    )

    %checkCUI(
        medWarfarin_CUI,
        &rx_start_dt,
        &rx_end_dt,
        %str(&warf_cui)
    )

    /* Medication: Dabigatran */
    %checkNDC(
        medDabigatran_NDC,
        &rx_start_dt,
        &rx_end_dt,
        %str(&dabi_ndc)
    )

    %checkCUI(
        medDabigatran_CUI,
        &rx_start_dt,
        &rx_end_dt,
        %str(&dabi_cui)
    )

    /* Medication: Rivaroxaban */
    %checkNDC(
        medRivaroxaban_NDC,
        &rx_start_dt,
        &rx_end_dt,
        %str(&riva_ndc)
    )

    %checkCUI(
        medRivaroxaban_CUI,
        &rx_start_dt,
        &rx_end_dt,
        %str(&riva_cui)
    )

    /* Medication: Apixaban */
    %checkNDC(
        medApixaban_NDC,
        &rx_start_dt,
        &rx_end_dt,
        %str(&apix_ndc)
    )

    %checkCUI(
        medApixaban_CUI,
        &rx_start_dt,
        &rx_end_dt,
        %str(&apix_cui)
    )

    /* Medication: Edoxaban */
    %checkNDC(
        medEdoxaban_NDC,
        &rx_start_dt,
        &rx_end_dt,
        %str(&edox_ndc)
    )

    %checkCUI(
        medEdoxaban_CUI,
        &rx_start_dt,
        &rx_end_dt,
        %str(&edox_cui)
    )

    /* Medication: Ticagrelor */
    %checkNDC(
        medTicagrelor_NDC,
        &rx_start_dt,
        &rx_end_dt,
        %str(&tica_ndc)
    )

    %checkCUI(
        medTicagrelor_CUI,
        &rx_start_dt,
        &rx_end_dt,
        %str(&tica_cui)
    )

    /* Enrichment criteria: Creatinine > 1.5 mg/dL */
    %checkLab(
        enrichCreat_MG,
        &rx_start_dt,
        &rx_end_dt,
        CREATININE,
        %str(MG/DL),
        %str(> 1.5)
    )

    %checkLab(
        enrichCreat_IU,
        &rx_start_dt,
        &rx_end_dt,
        CREATININE,
        %str(IU),
        %str(> 132.6)
    )

    %checkLab(
        enrichCreat_UMOL,
        &rx_start_dt,
        &rx_end_dt,
        CREATININE,
        %str(UMOL/L),
        %str(> 132.6)
    )

    /* Enrichment factor: Smoking */
    %if %upcase(&has_vital) = Y %then %do;
        proc sql;
            create table enrichSmoker as
            select distinct cdm_vit.patid
            from cdm.vital cdm_vit
            where cdm_vit.smoking in ('01', '02')
            order by cdm_vit.patid;
        quit;
    %end;
    %else %do;
        data enrichSmoker;
            set empty;
        run;
    %end;

    /* Merge all patient lists together and save output dataset */
    data outlib.adaptable_prelim;
        merge
            refPop (in = _refPop)
			died (in = _died)
			eligAge18 (in = _eligAge18)
			eligPriorMI_I9 (in = _eligPriorMI)
			eligPriorMI_I10 (in = _eligPriorMI)
			eligPriorPCI_I9Dx (in = _eligPriorPCI)
			eligPriorPCI_I10Dx (in = _eligPriorPCI)
			eligPriorPCI_I9Px (in = _eligPriorPCI)
			eligPriorPCI_I10Px (in = _eligPriorPCI)
			eligPriorPCI_C4HC (in = _eligPriorPCI)
			eligPriorCABG_I9Dx (in = _eligPriorCABG)
			eligPriorCABG_I10Dx (in = _eligPriorCABG)
			eligPriorCABG_I9Px (in = _eligPriorCABG)
			eligPriorCABG_I10Px (in = _eligPriorCABG)
			eligPriorCABG_C4HC (in = _eligPriorCABG)
			safetyGIBleed_I9 (in = _safetyGIBleed)
			safetyGIBleed_I10 (in = _safetyGIBleed)
			safetyDisorder_I9 (in = _safetyDisorder)
			safetyDisorder_I10 (in = _safetyDisorder)
			medWarfarin_NDC (in = _medWarf)
			medWarfarin_CUI (in = _medWarf)
			medDabigatran_NDC (in = _medDabi)
			medDabigatran_CUI (in = _medDabi)
			medRivaroxaban_NDC (in = _medRiva)
			medRivaroxaban_CUI (in = _medRiva)
			medApixaban_NDC (in = _medApix)
			medApixaban_CUI (in = _medApix)
			medEdoxaban_NDC (in = _medEdox)
			medEdoxaban_CUI (in = _medEdox)
			medTicagrelor_NDC (in = _medTica)
			medTicagrelor_CUI (in = _medTica)
			enrichAge65 (in = _enrichAge65)
			enrichDiab_I9 (in = _enrichDiab)
			enrichDiab_I10 (in = _enrichDiab)
			enrichCVD_I9 (in = _enrichCVD)
			enrichCVD_I10 (in = _enrichCVD)
			enrichPAD_I9 (in = _enrichPAD)
			enrichPAD_I10 (in = _enrichPAD)
			enrichLVSD_I9 (in = _enrichLVSD)
			enrichLVSD_I10 (in = _enrichLVSD)
            enrichCreat_MG (in = _enrichCreat)
            enrichCreat_IU (in = _enrichCreat)
            enrichCreat_UMOL (in = _enrichCreat)
            enrichSmoker (in = _enrichSmoker)
        ;
        by patid;

        /* Reassign temporary indicators to permanent dataset variables */
        refPop = _refPop;
        died = _died;
        eligAge18 = _eligAge18;
        eligPriorMI = _eligPriorMI;
        eligPriorPCI = _eligPriorPCI;
        eligPriorCABG = _eligPriorCABG;
        safetyGIBleed = _safetyGIBleed;
        safetyDisorder = _safetyDisorder;
        enrichAge65 = _enrichAge65;
        enrichDiab = _enrichDiab;
        enrichCVD = _enrichCVD;
        enrichPAD = _enrichPAD;
        enrichLVSD = _enrichLVSD;
        enrichCreat = _enrichCreat;
        medWarf = _medWarf;
        medDabi = _medDabi;
        medRiva = _medRiva;
        medApix = _medApix;
        medEdox = _medEdox;
        medTica = _medTica;
        enrichSmoker = _enrichSmoker;

        /* Define top-level criteria categories */
        eligASCVD = (
			eligPriorMI or
			eligPriorPCI or
			eligPriorCABG
        );

        safetyIssue = (
			safetyGIBleed or
			safetyDisorder
        );

        enrichFactor = (
			enrichAge65 or
			enrichDiab or
			enrichCVD or
			enrichPAD or
			enrichLVSD or
            enrichCreat or
            enrichSmoker
        );

        medContra = (
			medWarf or
			medDabi or
			medRiva or
			medApix or
			medEdox or
			medTica
        );

        /* Set preliminary eligibility flag */
        if  refPop and
            not died and
            eligAge18 and
            eligASCVD and
            enrichFactor and
            not safetyIssue and
            not medContra then
            eligibleCDM = 1;
        else
            eligibleCDM = 0;

        /* Output only those with the basic requirements met:                  |
        |  In the reference population, not known to have died, 18+ years old */
        if  refPop and
            not died and
            eligAge18 then
            output;

        /* Assign variable labels */
        label
            patid = "CDM Patient ID"
            refPop = "Reference population membership"
            died = "Known to have died [CDM basis]"
            eligAge18 = "Eligibility/Age: Age >= 18 years [CDM basis]"
            eligPriorMI = "Eligibility/ASCVD: Prior MI [CDM basis]"
            eligPriorPCI = "Eligibility/ASCVD: Prior PCI [CDM basis]"
            eligPriorCABG = "Eligibility/ASCVD: Prior CABG [CDM basis]"
            safetyGIBleed = "Safety issue: Recent GI bleed [CDM basis]"
            safetyDisorder = "Safety issue: Bleeding disorder [CDM basis]"
            enrichAge65 = "Enrichment factor: Age > 65 years [CDM basis]"
            enrichDiab = "Enrichment factor: Diabetes [CDM basis]"
            enrichCVD = "Enrichment factor: Cerebrovascular dz [CDM basis]"
            enrichPAD = "Enrichment factor: Peripheral arterial dz [CDM basis]"
            enrichLVSD = "Enrichment factor: LVEF < 50% [CDM basis]"
            enrichCreat = "Enrichment factor: Creatinine > 1.5 mg/dL [CDM basis]"
            enrichSmoker = "Enrichment factor: Current smoker [CDM basis]"
            medWarf = "Medication/OAC: Warfarin [CDM basis]"
            medDabi = "Medication/OAC: Dabigatran [CDM basis]"
            medRiva = "Medication/OAC: Rivaroxaban [CDM basis]"
            medApix = "Medication/OAC: Apixaban [CDM basis]"
            medEdox = "Medication/OAC: Edoxaban [CDM basis]"
            medTica = "Medication: Ticagrelor [CDM basis]"
            eligASCVD = "Eligibility/ASCVD: Any [CDM basis]"
            safetyIssue = "Safety issue: Any [CDM basis]"
            enrichFactor = "Enrichment factor: Any [CDM basis]"
            medContra = "Medication: Any of listed [CDM basis]"
            eligibleCDM = "Preliminary eligibility [CDM basis]"
        ;
    run;

    /* Check results */
    proc contents data=outlib.adaptable_prelim;
    run;

    proc freq data=outlib.adaptable_prelim;
        title "ADAPTABLE Phenotype CDM / Preliminary eligibility count";
        tables eligibleCDM;
    run;

%mend;

%main

